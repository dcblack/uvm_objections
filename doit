#!/bin/bash
#
#$Info: ./doit - Script to run various performance runs. $
#
# ./doit -h will display the documentation

################################################################################
#
#  #    # ##### #     #####
#  #    # #     #     #    #
#  #    # #     #     #    #
#  ###### ##### #     #####
#  #    # #     #     #
#  #    # #     #     #
#  #    # ##### ##### #
#
################################################################################
# DOCUMENTATION
#-------------------------------------------------------------------------------
function Help() {
  perldoc $0
  cat >/dev/null <<.
=pod

=head1 NAME

B<doit> - Script to run various performance runs

=head1 SYNOPSIS

B<./doit> [OPTIONS] [VERSIONS]

=head1 DESCRIPTION

This script uses a specified simulator (default Mentor questa) to run
UVM objections performance testing. Default is to raise and lower objections
millions of times and report the overall CPU time.

=head1 OPTIONS

=over

=item B<-C> #

Number of times to repeat inner loop

=item B<-D> #

Number of agents to instantiate

=item B<-h>

Display this help.

=item B<-L> #

Number of levels of hierarchy above drivers

=item B<-P> 0|1

Propagate objections or not (affects 1.2 and above only)

=item B<-q>

Quiet mode to suppress unnecessary output.

=item B<-S> questa|ius|vcs

Specify simulator to use.

=item B<-T> I<TAG>

Specify a I<TAG> to include in log file name.

=item B<-p> #

Seconds to delay between simulations (minimum 5)

=item B<-v>

Verbose mode to expand explanatory output.

=back

=head1 VERSIONS

Supported versions are:

=over

=item 1.1b

=item 1.1c

=item 1.1d

=item 1.2

=item 1.2r

=back

=head1 COPYRIGHT

Copyright (C) 2014 Doulos Inc. All rights reserved.

=head1 AUTHOR

David C Black <david.black@doulos.com>

=cut

.
exit 0
}

################################################################################
#
#   ####   ####  ####   #####
#  #    # #    # #   #  #    
#  #      #    # #    # #    
#  #      #    # #    # #####
#  #      #    # #    # #    
#  #    # #    # #   #  #    
#   ####   ####  ####   #####
#
################################################################################
# CODE
#-------------------------------------------------------------------------------
export TAG

function analyze_uvm_objection_performance() {
  local R=""
  if [[ "$6" = "R=0" ]]; then R="r"; fi
  bin/header ${2}${R}
  echo "------------------------------------------------------------------------------"
  echo "analyze_uvm_objection_performance ${1} ${2} ${3} ${4} ${5} ${6}"                | tee ${SIM}+uvm-${2}${R}${TAG}-log.txt
  echo "% env UVM_HOME=/eda/uvm/uvm-${2} make ${1}_std V=${2} ${3} ${4} ${5} ${6} 2>&1" | tee -a ${SIM}+uvm-${2}${R}${TAG}-log.txt
  env UVM_HOME=/eda/uvm/uvm-${2} make ${1}_std V=${2} ${3} ${4} ${5} ${6} 2>&1          | tee -a ${SIM}+uvm-${2}${R}${TAG}-log.txt
}

################################################################################
function Doit() {
  local ALL="1.1b 1.1c 1.1d 1.2r 1.2"
  local LIST=""
  local verbose=0
  local pause=60
  local LEVELS=$LEVELS
  local AGENTS=$AGENTS
  local COUNTS=$COUNTS
  local RIPPLE=$RIPPLE
  local SIM=$SIM
  if [[ "$LEVELS" = "" ]]; then LEVELS=3; fi
  if [[ "$AGENTS" = "" ]]; then AGENTS=2; fi
  if [[ "$COUNTS" = "" ]]; then COUNTS=21e6; fi
  if [[ "$RIPPLE" = "" ]]; then RIPPLE=1; fi
  if [[ "$SIM"    = "" ]]; then SIM="questa"; fi

  while  [[ "${1}" =  -* ]];do
    if   [[ "${1}" = "-q" ]]; then verbose=0;
    elif [[ "${1}" = "-C" ]]; then COUNTS=${2}; shift;
    elif [[ "${1}" = "-D" ]]; then AGENTS=${2}; shift;
    elif [[ "${1}" = "-h"     ]]; then Help;
    elif [[ "${1}" = "-help"  ]]; then Help;
    elif [[ "${1}" = "--help" ]]; then Help;
    elif [[ "${1}" = "-L" ]]; then LEVELS=${2}; shift;
    elif [[ "${1}" = "-P" ]]; then RIPPLE=${2}; shift;
    elif [[ "${1}" = "-S" ]]; then SIM=${2};    shift;
    elif [[ "${1}" = "-T" ]]; then TAG=${2};    shift;
    elif [[ "${1}" = "-p" ]]; then pause=${2};  shift;
    elif [[ "${1}" = "-v" ]]; then verbose=1;
    fi
    shift
  done
  while [[ $# != 0 ]]; do # Add user specified targets
    LIST="$LIST ${1}"
    shift
  done
  if [[ "$LIST" = "" ]]; then # Use default list
    LIST="$ALL"
  fi
  case $SIM in # Legal simulator target prefixes
    questa) ;;
    ius) ;;
    vcs) ;;
    *) echo "FATAL: Invalid simulator '$SIM' specified"; exit 1 ;;
  esac
  if [[ $pause -lt 30 ]]; then pause=30; fi # Minimum


  for V in $LIST; do
    case "$V" in
      #     0                                 1    2    3         4         5         6
      1.1b) analyze_uvm_objection_performance $SIM 1.1b L=$LEVELS D=$AGENTS C=$COUNTS R=$RIPPLE ;;
      1.1c) analyze_uvm_objection_performance $SIM 1.1c L=$LEVELS D=$AGENTS C=$COUNTS R=$RIPPLE ;;
      1.1d) analyze_uvm_objection_performance $SIM 1.1d L=$LEVELS D=$AGENTS C=$COUNTS R=$RIPPLE ;;
      1.2r) analyze_uvm_objection_performance $SIM 1.2  L=$LEVELS D=$AGENTS C=$COUNTS R=0       ;;
      1.2 ) analyze_uvm_objection_performance $SIM 1.2  L=$LEVELS D=$AGENTS C=$COUNTS R=$RIPPLE ;;
      1.* ) analyze_uvm_objection_performance $SIM $V   L=$LEVELS D=$AGENTS C=$COUNTS R=$RIPPLE ;;
    esac
    make clean
    echo ""
    if [[ $pause != 0 ]]; then sleep $pause; fi
  done
}

################################################################################
Doit "$@"
