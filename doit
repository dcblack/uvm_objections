#!/bin/bash
#
#$Info: ./doit - Script to run various performance runs. $
#
# ./doit -h will display the documentation

################################################################################
#
#  #    # ##### #     #####
#  #    # #     #     #    #
#  #    # #     #     #    #
#  ###### ##### #     #####
#  #    # #     #     #
#  #    # #     #     #
#  #    # ##### ##### #
#
################################################################################
# DOCUMENTATION
#-------------------------------------------------------------------------------
function Help() {
  perldoc $0
  cat >/dev/null <<.
=pod

=head1 NAME

B<doit> - Script to run various performance runs

=head1 SYNOPSIS

B<./doit> [OPTIONS] [VERSIONS]

=head1 DESCRIPTION

This script uses a specified simulator (default Mentor questa) to run
UVM objections performance testing. Default is to raise and lower objections
millions of times and report the overall CPU time.

=head1 OPTIONS

=over

=item B<-1>

Run a single test (pipe cleaner).

=item B<-C> #

Number of times to repeat inner loop

=item B<-D> #

Number of agents to instantiate

=item B<-h>

Display this help.

=item B<-L> #

Number of levels of hierarchy above drivers

=item B<-n>

Not really

=item B<-P> 0 | 1

Propagate objections or not (affects 1.2 and above only)

=item B<-q>

Quiet mode to suppress unnecessary output.

=item B<-R> I<TRLEN>

Specify transaction length to use. This has
a special format using one hex digit for each
driver. Example: 3_2_1 means a length of 3ps
for driver 2, 2ps for driver 1, and 1ps for driver 0.
Unspecified drivers get a value of 1ps.

=item B<-S> questa | ius | vcs

Specify simulator to use.

=item B<-U> 0 | 1

Specify whether to use a full sequence (1) or a short 1ps sequence.

=item B<-X> NUMBER

Specify context switching choice.

=item B<-t> I<TAG>

Specify a I<TAG> to include in log file name.

=item B<-p> #

Seconds to delay between simulations (minimum 5)

=item B<-v>

Verbose mode to expand explanatory output.

=back

=head1 VERSIONS

Supported versions are:

=over

=item 1.1b

=item 1.1c

=item 1.1d

=item 1.2

=item 1.2r

=back

=head1 COPYRIGHT

Copyright (C) 2014 Doulos Inc. All rights reserved.

=head1 AUTHOR

David C Black <david.black@doulos.com>

=cut

.
exit 0
}

################################################################################
#
#   ####   ####  ####   #####
#  #    # #    # #   #  #    
#  #      #    # #    # #    
#  #      #    # #    # #####
#  #      #    # #    # #    
#  #    # #    # #   #  #    
#   ####   ####  ####   #####
#
################################################################################
# CODE
#-------------------------------------------------------------------------------
export TAG
not_really=0

function Analyze_uvm_objection_performance() {
  #   1   2    3        4        5       6      7        8        9
  # $SIM VERS L=LEVELS A=AGENTS C=COUNT P=PROP U=USESEQ R=TR_LEN X=SWITCHING
  local SIM=$1 VERS=$2 LVLS=$3 AGTS=$4 CNT=$5 PROP=$6 U=$7 R=$8 X=$9
  shift; shift
  local var val
  for arg in $@; do
    if [[ $arg =~ [A-Za-z]=* ]]; then
      var=$(echo "$arg"|perl -pe 's/=.*//')
      val=$(echo "$arg"|perl -pe 's/.*=//')
      local $var=$val
    fi
  done
  local clean='clean'
  local LOG="$VERS"
  if [[ ${#VERS} = 3    ]]; then
    if [[ "$P" = 0 ]]; then
      LOG="${LOG}_";
    else
      LOG="${LOG}+";
    fi
  fi
  LOG="$LOG-"
  local t
  t=$(echo "U=$U"|perl -pe 's/=//'); LOG="$LOG$t"
  t=$(echo "R=$R"|perl -pe 's/=//'); LOG="$LOG$t"
  t=$(echo "X=$X"|perl -pe 's/=//'); LOG="$LOG$t"
  t=$(echo "L=$L%"|perl -pe 's/=//;s/([L])([1-9])%/${1}0${2}%/;s/%//'); LOG="$LOG$t"
  t=$(echo "A=$A"|perl -pe 's/=//'); LOG="$LOG$t"
  case "$SIM" in
    questa) LOG="q$LOG" ;;
    ius   ) LOG="i$LOG" ;;
    vcs   ) LOG="v$LOG" ;;
    aldec ) LOG="a$LOG" ;;
    *     ) LOG="_$LOG" ;;
  esac
  LOG="$(echo $LOG|tr AXUR axur)" ; # force to lowercase
  LOG="$LOG$TAG"
  if [[ $not_really = 0 ]]; then
    bin/header "$LOG"
    echo "------------------------------------------------------------------------------"
    echo "Analyze_uvm_objection_performance ${SIM} ${VERS} $*"                          | tee    $LOG.txt
    echo "% env UVM_HOME=/eda/uvm/uvm-${VERS} make $clean ${SIM}_std V=${VERS} $* 2>&1" | tee -a $LOG.txt
    env UVM_HOME=/eda/uvm/uvm-${VERS} make $clean ${SIM}_std V=${VERS} "$@" 2>&1        | tee -a $LOG.txt
  else
    echo "% env UVM_HOME=/eda/uvm/uvm-${VERS} make $clean ${SIM}_std V=${VERS} $* 2>&1  | tee   $LOG.txt"
  fi
} #end Analyze_uvm_objection_performance

################################################################################
function Doit() {
  local ALL_VERSIONS="1.1b 1.1c 1.1d 1.2r 1.2"
  local VERSIONS=""
  local verbose=0
  local pause=10
  local LEVELS=$LEVELS
  local AGENTS=$AGENTS
  local COUNTS=$COUNTS
  local PROPAGATE=$PROPAGATE
  local TR_LEN=$TR_LEN
  local USESEQ=$USESEQ
  local SIM=$SIM
  local SWITCHING=$SWITCHING
  local first_only=0
  local OPTS
  if [[ "$LEVELS"    = "" ]]; then LEVELS="3 99"     ; fi
  if [[ "$AGENTS"    = "" ]]; then AGENTS="2 4"      ; fi
  if [[ "$COUNTS"    = "" ]]; then COUNTS="21000000" ; fi
  if [[ "$PROPAGATE" = "" ]]; then PROPAGATE="1"     ; fi
  if [[ "$TR_LEN"    = "" ]]; then TR_LEN="0 12"     ; fi
  if [[ "$USESEQ"    = "" ]]; then USESEQ="0 1"      ; fi
  if [[ "$SIM"       = "" ]]; then SIM="all"         ; fi
  if [[ "$SWITCHING" = "" ]]; then SWITCHING="1"     ; fi

  while  [[ "${1}" =  [+-]* ]];do
    if   [[ "${1}" = "-1"     ]]; then first_only=1;
    elif [[ "${1}" = "-q"     ]]; then verbose=0;
    elif [[ "${1}" = "-h"     ]]; then Help;
    elif [[ "${1}" = "-help"  ]]; then Help;
    elif [[ "${1}" = "--help" ]]; then Help;
    elif [[ "${1}" = "-n"     ]]; then not_really=1;
    elif [[ "${1}" = "-p"     ]]; then pause=${2};     shift;
    elif [[ "${1}" = "-t"     ]]; then TAG=${2};       shift;
    elif [[ "${1}" = "-C"     ]]; then COUNTS=${2};    shift;
    elif [[ "${1}" = "-D"     ]]; then AGENTS=${2};    shift;
    elif [[ "${1}" = "-L"     ]]; then LEVELS=${2};    shift;
    elif [[ "${1}" = "-P"     ]]; then PROPAGATE=${2}; shift;
    elif [[ "${1}" = "-S"     ]]; then SIM=${2};       shift;
    elif [[ "${1}" = "-R"     ]]; then TR_LEN=${2};    shift;
    elif [[ "${1}" = "-U"     ]]; then USESEQ=${2};    shift;
    elif [[ "${1}" = "-X"     ]]; then SWITCHING=${2}; shift;
    elif [[ "${1}" = "-v"     ]]; then verbose=1;
    else                               OPTS="$OPTS ${1}"
    fi
    shift
  done
  SIMS=
  while [[ $# -gt 0 ]]; do # Add user specified targets
    case "$1" in
      all|aldec|cadence|mentor|synopsys|modelsim|questa|ius|vcs|riviera) SIMS="${SIMS} $1" ;;
      +*) OPTS="$OPTS $1" ;;
       *) VERSIONS="$VERSIONS $1" ;;
    esac
    shift
  done
  if [[ "$SIMS" != "" ]]; then
    if [[ "$SIM" = "all" ]]; then
      SIM="$SIMS";
    else
      SIM="$SIM $SIMS";
    fi
  fi
  if [[ "$VERSIONS" = "" ]]; then # Use default list
    VERSIONS="$ALL_VERSIONS"
  fi
  SIMS=
  for S in $SIM; do
    case "$S" in # Legal simulator target prefixes
      aldec|riviera          ) SIMS="$SIMS aldec"  ;;
      cadence|ius|incisive   ) SIMS="$SIMS ius"    ;;
      mentor|questa|modelsim ) SIMS="$SIMS questa" ;;
      synopsys|vcs           ) SIMS="$SIMS vcs"    ;;
                 all) SIMS="$SIMS questa ius vcs"  ;;
      *) echo "FATAL: Invalid simulator '$S' specified"; exit 1 ;;
    esac
  done
  if [[ $pause -gt 0 && $pause -lt 10 ]]; then pause=10; fi # Minimum

  let first=1
  for S in $SIMS; do
    for L in $LEVELS; do
      for A in $AGENTS; do
        for U in $USESEQ; do
          for R in $TR_LEN; do
            for X in $SWITCHING; do
              for V in $VERSIONS; do
                # Pause between runs to allow clean interrupt
                if [[ $not_really = 0 && $first = 0 && $pause != 0 ]]; then
                  echo -n "Pausing $pause"
                  let i=$pause
                  while [[ $i -gt 0 ]]; do
                    echo -n "."
                    sleep 1;
                    let i--
                  done
                  echo ""
                fi
                let first=0

                case "$V" in
                  #     0                                 1    2   3         4         5            6    7    8
                  1.1b) Analyze_uvm_objection_performance $S 1.1b L=$L A=$A C=$COUNTS P=$PROPAGATE U=$U R=$R X=$X OPTS="$OPTS" ;;
                  1.1c) Analyze_uvm_objection_performance $S 1.1c L=$L A=$A C=$COUNTS P=$PROPAGATE U=$U R=$R X=$X OPTS="$OPTS" ;;
                  1.1d) Analyze_uvm_objection_performance $S 1.1d L=$L A=$A C=$COUNTS P=$PROPAGATE U=$U R=$R X=$X OPTS="$OPTS" ;;
                  1.2r) Analyze_uvm_objection_performance $S 1.2  L=$L A=$A C=$COUNTS P=0          U=$U R=$R X=$X OPTS="$OPTS" ;;
                  1.2 ) Analyze_uvm_objection_performance $S 1.2  L=$L A=$A C=$COUNTS P=$PROPAGATE U=$U R=$R X=$X OPTS="$OPTS" ;;
                  1.* ) Analyze_uvm_objection_performance $S $V   L=$L A=$A C=$COUNTS P=$PROPAGATE U=$U R=$R X=$X OPTS="$OPTS" ;;
                     *) echo "ERROR: Weird UVM version '$V'" ; exit 1 ;;
                esac
                if [[ $not_really = 0 ]]; then
                  echo ""
                fi
                if [[ $first_only = 1 ]]; then
                  break 42
                fi
              done
            done
          done
        done
      done
    done
  done

  echo "------------------------------------------------------------------------------"
  echo "INFO: Don't forget to clean-up simulator temporaries..."
  echo "------------------------------------------------------------------------------"
  echo ""
} #end Doit

################################################################################
if [[ $# != 0 ]]; then
  Doit "$@"
else
  Doit
fi
